# -*- coding: utf-8 -*-
"""Trabalhando com Planilhas do Excel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MXvOIEGzJLfGkkdmiDWa27dfqLYAFOQ3
"""

import pandas as pd

#Leitura de Arquivos
df1 = pd.read_excel('Aracaju.xlsx')
df2 = pd.read_excel('Fortaleza.xlsx')
df3 = pd.read_excel('Natal.xlsx')
df4 = pd.read_excel('Recife.xlsx')
df5 = pd.read_excel('Salvador.xlsx')

#Juntando todos os arquivos
df = pd.concat([df1, df2, df3, df4, df5])

#Exibindo as 5 primeiras linhas
df.head()

#Exibindo as 5 ultimas linhas
df.tail()

#Coletando uma amostra do conjunto de dados
df.sample(5)

#Verificando o tipo de dados de cada coluna
df.dtypes

#Alterando o tipo de dado de uma coluna
df['LojaID'] = df['LojaID'].astype('object')

df.dtypes

"""##Tratando valores faltantes"""

#Consultando linhas com valores faltantes
df.isnull().sum()

#Valores faltantes substituidos pela média
df['Vendas'].fillna((df['Vendas']).mean(), inplace=True)

#Valores faltantes substituidos por
df['Vendas'].fillna(0, inplace=True)

#Apagar linhas com valores nulos
df.dropna(inplace=True)

#Apagando as linhas com valores nulos com base em apenas 1 coluna
df.dropna(subset=['Vendas'], inplace=True)

#Removendo linhas que estejam com valores faltantes em todas as colunas
df.dropna(how='all', inplace=True)

"""##Criando colunas novas"""

df.head()

#Criando uma coluna de RECEITA
df['Receita'] = df['Vendas'].mul(df['Qtde']) #Receitas = Vendas*Qtde
df

#Retornando a maior Receita
df['Receita'].max()

#Retornando a menor Receita
df['Receita'].min()

#nlargest
df.nlargest(3, 'Receita') #Retorna top 3 maiores receitas

#nsmallest
df.nsmallest(3, 'Receita') #Retorna 3 piores receitas

#Agrupamento de Receita por Cidade
df.groupby('Cidade')['Receita'].sum()

#Ordenando conjunto de dados
df.sort_values('Receita', ascending=False).head(10)

"""##Trabalhando com datas"""

#Tranformando a coluna de data em tipo inteiro
df['Data'] = df['Data'].astype('int64')
df.dtypes

#Transformando coluna data em data
df['Data'] = pd.to_datetime(df['Data'])
df.dtypes

#Agrupando por ano
df.groupby(df['Data'].dt.year)['Receita'].sum()

#Criar coluna com o ano
df['Ano_Venda'] = df['Data'].dt.year

df.sample(6)

#Extraindo mês e o dia
df['Mes_venda'], df['dia_venda'] = (df['Data'].dt.month, df['Data'].dt.day)

df.sample(4)

#Data mais antiga
df['Data'].min()

#Calculando a diferenla de dias
df['diferenca_dias'] = df['Data'] - df['Data'].min() #Data - Data Minima

df.sample(3)

#Criando a coluna trimestre
df['semestre_venda'] = df['Data'].dt.quarter

df.sample(3)

#Filtrando as vendas de 2019 do mes de marco
vendas_marco_19 = df.loc[(df['Data'].dt.year == 2019) & (df['Data'].dt.month == 3)]
vendas_marco_19

"""## Visualização de Dados"""

#Total de VENDAS
df['LojaID'].value_counts(ascending=False)

#Grafico de barras total de vendas
df['LojaID'].value_counts(ascending=False).plot.bar()

#Grafico de barras horizontais total de vendas
df['LojaID'].value_counts(ascending=True).plot.barh(); # ; elimina a linbha em cima do grafico

#Grafico de Pizza
df.groupby(df['Data'].dt.year)['Receita'].sum().plot.pie();

#Total de vendas por cidade
df['Cidade'].value_counts()

#Adicionando um título e alterando o nome dos eixos
import matplotlib.pyplot as plt
df['Cidade'].value_counts().plot.bar(title='Total vendas por Cidade')
plt.xlabel('Cidade')
plt.ylabel('Total Vendas');

#Alterando a cor
df['Cidade'].value_counts().plot.bar(title='Total vendas por Cidade', color='red')
plt.xlabel('Cidade)
plt.ylabel('Total Vendas');

#Alterando o estilo
plt.style.use('ggplot')

df.sample()

df.groupby(df['Mes_venda'])['Qtde'].sum().plot(title = 'Total Produtos vendidos x mês)
plt.xlabel('Mês')
plt.ylabel('Total Produtos Vendidos')
plt.legend();

df.groupby(df["Mes_venda"])["Qtde"].sum()

#Selecionando apenas as vendas de 2019
df_2019 = df[df['Ano_Venda'] == 2019]
df_2019

df_2019.groupby(df_2019['Mes_venda'])['Qtde'].sum()

#Total produtos vendidos por mês
df_2019.groupby(df_2019['Mes_venda'])['Qtde'].sum().plot(marker = 'o')
plt.xlabel('Mês')
plt.ylabel('Total Produtos Vendidos')
plt.legend();

#Hisograma
plt.hist(df['Qtde'], color='orangered');

plt.scatter(x=df_2019['dia_venda'], y = df_2019['Receita']);

#Salvando em png
df_2019.groupby(df_2019['Mes_venda'])['Qtde'].sum().plot(marker = 'v')
plt.title('Quantidade de produtos vendidos x mês')
plt.xlabel('Mês')
plt.ylabel('Total Produtos Vendidos');
plt.legend()
plt.savefig('grafico QTDE x MES.png')

